<!DOCTYPE html>
<html lang="en">
<head>
    <title>Bill Splitter App</title>
    <style>
        :root{ 
    /* some color variables to keep a consistent color scheme
    TODO add more colors, and change to a different color scheme maybe */
        --bg1: #F7F9FC;
        --bg2: #FFF;
        
        --main1: #4A90E2;
        --main2: #357AB7;
        
        --text-bright: #FFF;
        --text-dark: #333;
        --text-error: #800;
    }
    
    body {
        font-family: 'Roboto', sans-serif;
        margin: 20px;
        background-color: var(--bg1);
        color: var(--text-dark);
        height: 100%;
    }
    
    h1 {
        text-align: center;
        font-size: 40px;
        color: var(--main1);
        padding: 2vh;
        border-bottom: 1px solid var(--text-dark)
    }
    
    #loginPrompt {
        background-color: var(--bg2);
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 80vw;
        max-width: 90vh; /* these widths should make it thin in the center of a desktop screen, and normal for a mobile screen */
        margin: auto;
    }
    
    #submitButton {
        display: block;
        margin: auto;
        margin-top: 20px;
        width: 100px;
    }
    
    #error {
        color: var(--text-error);
    }
    
    label {
        margin-right: 10px;
        display: block;
        margin-top: 10px;
    }
    
    .input-box, select {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box;
        margin-top: 5px;
        transition: border-color 0.3s ease;
    }
    
    input[type="text"]:focus,
    input[type="number"]:focus,
    select:focus {
        border-color: var(--main1);
        outline: none;
    }
    
    .hide-input {
        display: none
    }
    
    button {
        
        padding: 10px 20px;
        background-color: var(--main1);
        color: var(--bg2);
        border: none;
        border-radius: 5px;
        cursor: pointer;
    
        transition: background-color 0.3s ease;
    }
    
    button:hover {
        background-color: var(--main2);
    }
    
    #debts {
        background-color: var(--bg1);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    
    /* ... (previous styles remain the same) */
    
    table {
        width: 100%;
        border-collapse: collapse;
    }
    
    th, td {
        padding: 10px;
        text-align: center;
        border: 1px solid #ccc;
    }
    
    th {
        background-color: var(--main1);
        color: var(--text-bright);
    }
    
    #parent {
        width: 100%;
        display: flex;
        justify-content: space-between;
        min-height: 50vh;
    }
    
    #inputSection {
        width: 25%;
    }
    
    #expensesList{
        text-align: center;
        width: 40%;
    }
    
    #cal{
        width: 25%;
    }
    
    #mainpage{
        text-align: center;
        position: absolute;
        top: 50%;
        left: 50%;
        width: 80%;
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
    
    .divbox{
        vertical-align: top;
        background-color: var(--bg2);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px; /* just to even them out (w/o this they have different margins for some reason?) */
    }
    
    .subtitle{
        font-size: 18px;
        color: var(--text-dark);
    }
    
    #editButton{
        margin: -5px; /* this is stupid (it just undoes the padding of the td object to make things more compact) */
    }
    </style>
</head>
<body>
    <h1>Bill Splitter App</h1>
    <div id="parent">
        <div class="divbox" id="inputSection">
			<h2>Expense Input</h2>
            <label for="category">Category:</label>
            <select  id="category" onchange="enableNewCategory(this)">
				<option value="">Select a Category</option> <!-- do we even need this option? -->
				<option value="Transportation">Transportation</option>
				<option value="Accommodation">Accommodation</option>
				<option value="Food">Food</option>
				<option value="Other" id="selectOther">Other</option>
			</select>
			<p id="alertCategory"></p>
			<input type="text" id="newCategory" placeholder="Enter Your Category" class="hide-input input-box">

            <label for="amount">Amount:</label>
            <input type="number" id="amount" class="input-box" placeholder="Enter amount">

            <button onclick="addExpense()" style="margin-top: 20px;">Add Expense</button>
        </div>

        <div class="divbox" id="expensesList">
            <h2>Expense List</h2>
            <% expenses.forEach(function(expense) { %>
                <div>
                  <p><%= expense.username %> - <%= expense.description %> - $<%= expense.amount %></p>
                </div>
              <% }); %>
		</div>
        <div class="divbox" id="cal">
            <h2>Calculated Debts</h2>
            <button onclick="calculateDebts()">Calculate Debts</button>
            <div id="debts"></div>
        </div>
	</div>
	<div id="inviteUser" class="divbox">
        <h2>Invite User</h2>
        <label for="inviteUsername">Username:</label>
        <input type="text" id="inviteUsername" class="input-box" placeholder="Enter username">
        <button onclick="sendInvitation()" style="margin-top: 20px;">Invite</button>
        <p id="invitationMessage"></p>
    </div>

        <script>
            function addExpense() {
                const username = '<%= username %>';
                const description = document.getElementById('category').value;
                const amount = parseFloat(document.getElementById('amount').value);

                fetch('/user/api/add-expense', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, description, amount, tripId: '<%= tripId %>' })
                })
                .then(response => response.json())
                .then(data => {
                    updateExpensesList();
                    window.location.reload();
                })
                .catch(error => console.error('Error:', error));
            }

            function updateExpensesList() {
                fetch('/user/api/get-expenses?tripId=<%= tripId %>')
                .then(response => response.json())
                .then(expenses => {
                    const listDiv = document.getElementById("table");
                    listDiv.innerHTML = '';
                    expenses.forEach(expense => {
                        listDiv.innerHTML += `<p>${expense.username} - ${expense.description} - $${expense.amount}</p>`;
                    });
                })
                .catch(error => console.error('Error fetching expenses:', error));
            }

function calculateDebts() {
    fetch('/user/api/get-expenses?tripId=<%= tripId %>')
    .then(response => response.json())
    .then(expenses => {
        // Aggregate expenses by each user
        let userExpenses = {};
        expenses.forEach(expense => {
            if (!userExpenses[expense.username]) {
                userExpenses[expense.username] = 0;
            }
            userExpenses[expense.username] += parseFloat(expense.amount);
        });

        const totalExpense = Object.values(userExpenses).reduce((acc, amount) => acc + amount, 0);
        const perPerson = totalExpense / Object.keys(userExpenses).length;

        // Calculate how much each user owes or is owed
        let debts = Object.keys(userExpenses).map(username => ({
            name: username,
            owes: perPerson - userExpenses[username]
        }));

        let resultHtml = `<h2>Total Amount Spent: $${totalExpense.toFixed(2)}</h2>`;
        resultHtml += "<h3>Debts:</h3><table><thead><tr><th>Debtor</th><th>Creditor</th><th>Amount</th></tr></thead><tbody>";

        // Settle the debts
        debts.forEach(debtor => {
            if (debtor.owes > 0) {
                debts.forEach(creditor => {
                    if (creditor.owes < 0 && debtor.owes > 0) {
                        let amountToSettle = Math.min(debtor.owes, -creditor.owes);
                        resultHtml += `<tr><td>${debtor.name}</td><td>${creditor.name}</td><td>$${amountToSettle.toFixed(2)}</td></tr>`;
                        debtor.owes -= amountToSettle;
                        creditor.owes += amountToSettle;
                    }
                });
            }
        });

        resultHtml += "</tbody></table>";
        document.getElementById("debts").innerHTML = resultHtml;
    })
    .catch(error => console.error('Error:', error));
}

function sendInvitation() {
    const username = document.getElementById('inviteUsername').value;
    const tripId = '<%= tripId %>'; // Get the trip ID from your EJS template

    // Check if the username exists in the database and send the invitation
    fetch(`/user/api/send-invitation?username=${username}&tripId=${tripId}`, {
      method: 'POST',
    })
    .then(response => response.json())
    .then(invitationData => {
      if (invitationData.success) {
        document.getElementById('invitationMessage').textContent = 'Invitation sent successfully.';
      } else if (invitationData.error === 'User does not exist') {
        document.getElementById('invitationMessage').textContent = 'User does not exist.';
      } else if (invitationData.error === 'Invitation already sent') {
        document.getElementById('invitationMessage').textContent = 'Invitation already sent.';
      } else {
        document.getElementById('invitationMessage').textContent = 'Error sending invitation.';
      }
    })
    .catch(error => console.error('Error sending invitation:', error));
  }
  function editExpense(expenseId) {
        // Open an edit form for the expense.
        // For simplicity, this could be a prompt or a modal. Here's an example using prompt:
        const newDescription = prompt("Enter new description");
        const newAmount = prompt("Enter new amount");

        if (newDescription && newAmount) {
            fetch(`/user/api/update-expense/${expenseId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ description: newDescription, amount: newAmount })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message); // Show a success message
                updateExpensesList(); // Refresh the expenses list
            })
            .catch(error => console.error('Error updating expense:', error));
        }
    }
    function enableNewCategory(category){
    if(category.selectedIndex == 4)
    {
       document.getElementById("newCategory").classList.remove("hide-input"); 
    }else{
       document.getElementById("newCategory").classList.add("hide-input");
    }
}
        </script>
    </div>
</body>
</html>
